syntax = "proto3";
package cosmos.tx.v1beta1;

import "google/protobuf/any.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_registration) = true;
option go_package                       = "github.com/cosmos/cosmos-sdk/types/tx";

// Service defines a gRPC service for interacting with transactions.
service Service {
  // BroadcastTx broadcast transaction.
  rpc BroadcastTx(BroadcastTxRequest) returns (BroadcastTxResponse) {
    option (google.api.http) = {
      post: "/cosmos/tx/v1beta1/txs"
      body: "*"
    };
  }
}

// BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
// RPC method.
message BroadcastTxRequest {
  // tx_bytes is the raw transaction.
  bytes         tx_bytes = 1;
  BroadcastMode mode     = 2;
}

// BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.
enum BroadcastMode {
  // zero-value for mode ordering
  BROADCAST_MODE_UNSPECIFIED = 0;
  // BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
  // the tx to be committed in a block.
  BROADCAST_MODE_BLOCK = 1;
  // BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
  // a CheckTx execution response only.
  BROADCAST_MODE_SYNC = 2;
  // BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
  // immediately.
  BROADCAST_MODE_ASYNC = 3;
}

// BroadcastTxResponse is the response type for the
// Service.BroadcastTx method.
message BroadcastTxResponse {
  // tx_response is the queried TxResponses.
  /* cosmos.base.abci.v1beta1.TxResponse tx_response = 1; */
  TxResponse tx_response = 1;
}

// TxResponse defines a structure containing relevant tx data and metadata. The
// tags are stringified and the log is JSON decoded.
message TxResponse {
  option (gogoproto.goproto_getters) = false;
  // The block height
  int64 height = 1;
  // The transaction hash.
  string txhash = 2 [(gogoproto.customname) = "TxHash"];
  // Namespace for the Code
  string codespace = 3;
  // Response code.
  uint32 code = 4;
  // Result bytes, if any.
  string data = 5;
  // The output of the application's logger (raw string). May be
  // non-deterministic.
  string raw_log = 6;
  // The output of the application's logger (typed). May be non-deterministic.
  repeated ABCIMessageLog logs = 7 [(gogoproto.castrepeated) = "ABCIMessageLogs", (gogoproto.nullable) = false];
  // Additional information. May be non-deterministic.
  string info = 8;
  // Amount of gas requested for transaction.
  int64 gas_wanted = 9;
  // Amount of gas consumed by transaction.
  int64 gas_used = 10;
  // The request transaction bytes.
  google.protobuf.Any tx = 11;
  // Time of the previous block. For heights > 1, it's the weighted median of
  // the timestamps of the valid votes in the block.LastCommit. For height == 1,
  // it's genesis time.
  string timestamp = 12;
}

// ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
message ABCIMessageLog {
  option (gogoproto.stringer) = true;

  uint32 msg_index = 1;
  string log       = 2;

  // Events contains a slice of Event objects that were emitted during some
  // execution.
  repeated StringEvent events = 3 [(gogoproto.castrepeated) = "StringEvents", (gogoproto.nullable) = false];
}

// StringEvent defines en Event object wrapper where all the attributes
// contain key/value pairs that are strings instead of raw bytes.
message StringEvent {
  option (gogoproto.stringer) = true;

  string             type       = 1;
  repeated Attribute attributes = 2 [(gogoproto.nullable) = false];
}

// Attribute defines an attribute wrapper where the key and value are
// strings instead of raw bytes.
message Attribute {
  string key   = 1;
  string value = 2;
}

